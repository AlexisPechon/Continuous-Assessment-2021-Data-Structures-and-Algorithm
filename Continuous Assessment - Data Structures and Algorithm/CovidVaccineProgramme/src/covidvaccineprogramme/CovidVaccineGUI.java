/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covidvaccineprogramme;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * CovidVaccineGUI.java
 * 19/02/2021
 * @author Alexis Pechon
 * @Student Number x19358953
 */
public class CovidVaccineGUI extends javax.swing.JFrame {
    /*
     * The Data Structures used in this project are the:
     * 1. Priority Queue
     * 2. ArrayLists
    */
    
    PQInterface myQueue; //Creating an instance of the PQInterface class and calling it myQueue
    ArrayList <Patient> myPatient; //Creating an ArrayList of Object call myPatient

    /**
     * Creates new form CovidVaccineGUI
     */
    public CovidVaccineGUI() {
        initComponents();
        myQueue = new PriorityQueue(); //Creating a new Priority Queue to define all of the rules that was in the Interface class
        myPatient = new ArrayList<>(); //Assigning it to a new ArrayList

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        titleLbl = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        ageLbl = new javax.swing.JLabel();
        conditionLbl = new javax.swing.JLabel();
        ageTf = new javax.swing.JTextField();
        nameTf = new javax.swing.JTextField();
        conditionTf = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        sizeBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        priorityBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLbl.setText("Covid Vaccine GUI");

        nameLbl.setText("Name:");

        ageLbl.setText("Age: ");

        conditionLbl.setText("Medical Condition? (Yes/No): ");

        addBtn.setText("Add Patients");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        sizeBtn.setText("Number of Patients");
        sizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeBtnActionPerformed(evt);
            }
        });

        printBtn.setText("Print Patients");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Treat Patients");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit Application");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        priorityBtn.setText("Assign Priority to Patients");
        priorityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Phase 1: ");

        jLabel2.setText("Phase 2:");

        jLabel3.setText("Phase 3:");

        jLabel4.setText("Miscellaneous:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(titleLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(printBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(priorityBtn)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(23, 23, 23))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(conditionLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ageLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nameLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ageTf)
                                .addComponent(nameTf)
                                .addComponent(conditionTf, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(exitBtn)
                                .addComponent(sizeBtn)
                                .addComponent(jLabel4)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl)
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLbl)
                    .addComponent(ageTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conditionLbl)
                    .addComponent(conditionTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(sizeBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitBtn)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priorityBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printBtn)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeBtn)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // Method to exit the application
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
     
        //The purpose of this method is to store the patient's information to the ArrayList of Objects
        //The ArrayList used in this button method will also be used later on in the Assign Priority to Paitent button later on in the application
        
        if(nameTf.getText().equals("") || conditionTf.getText().equals("")){
            //if statement to check if the text fields for the name and condition are left empty.
            //if it is empty, this error message will be displayed back to the user
            JOptionPane.showMessageDialog(null,"You need to enter your name, age and medical condition to continue");
        }
        else{
            try{
                //try catch method is used to make sure that the program doesn't crash when the age text field exmpty
                String name, condition;
                int age;

                //Setting everything into the setters of the Patient class
                Patient p = new Patient();

                //Getting information from the text field and storing them in their appropriate variables
                name = nameTf.getText();
                p.setName(name);

                age = Integer.parseInt(ageTf.getText());
                p.setAge(age);

                condition = conditionTf.getText();
                p.setMedicalCondition(condition);
            
                myPatient.add(p); //Adds the Patient's information to the myPatient ArrayList
            
                JOptionPane.showMessageDialog(null,"Details successfully entered.");
                JOptionPane.showMessageDialog(null, "Click the Assign Priority Button to give them a priority"); //Prompting the user click the Assign Priority Button
            }
            catch (Exception e) {
                //Creating a custom error when the age text field is left empty
                JOptionPane.showMessageDialog(null, "It seems like something went wrong...");
            } 
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void sizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeBtnActionPerformed
        // Button to check the size of the array list by using myPatients
        JOptionPane.showMessageDialog(null, "The number of patients in the queue is: " + myPatient.size());
    }//GEN-LAST:event_sizeBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // Prints the patients that have to be vaccined
        
        if(!myQueue.isEmpty()){
            //Checks if the priority queue, called myQueue, is not empty, then executes the following code
            JOptionPane.showMessageDialog(null,myQueue.printQueue()); //Prints the patients stored in the Priority Queue back to the user
        }
        else{
            //Error message to tell the user that there is no patients in the queue
            JOptionPane.showMessageDialog(null, "There are no patients in the queue!");
        }
       
       //The code commented out below is the code used to display the patient information store in the ArrayList without the priority number 
       // if(!myPatient.isEmpty()){
       //     //If myQueue is not empty, the following message will be displayed to the user
       //     JOptionPane.showMessageDialog(null, "Here are the patients waiting to be vaccinated");
            
       //     for(Patient p : myPatient){
       //        JOptionPane.showMessageDialog(null, p.getDetails());
       //    }
       //}
       // else{
            //If myQueue is empty, then this error message will appear on screen
       //    JOptionPane.showMessageDialog(null, "There are no patients in the queue!");
       // }
        
    }//GEN-LAST:event_printBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // When the remove button is clicked it will execute the following code
        
        if(!myQueue.isEmpty()){ //If statement reads: if myQueue is not empty, delete the highest priority patient

            PQElement temp = (PQElement)myQueue.dequeue();
            Patient p = (Patient)temp.getElement(); //Access the patient class to get the user's name
            

            JOptionPane.showMessageDialog(null, "Can " + p.getName() +" go to the doctor's office to be vaccinate?");
            JOptionPane.showMessageDialog(null, "Priority: " + temp.getKey());
            
            myPatient.removeAll(myPatient); //When the remove button has been clicked, this will clear everything inside of the ArrayList
            
            
        }
        else{
            JOptionPane.showMessageDialog(null, "There is no more patients to be vaccinated!");
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void priorityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityBtnActionPerformed
        // The purpose of this button is to assign priority to the Patient depending on their age group
        if(nameTf.getText().equals("") || conditionTf.getText().equals("")){
            JOptionPane.showMessageDialog(null,"You need to enter your name, age and medical condition to continue");
        }
        else if(myPatient.isEmpty()){
            //an else if statement to check if the user skipped phase 1 and did phase 2.
            //if the myPatient ArrayList is empty an error message will prompt the user to fill in the details for Phase 1 firsts
            JOptionPane.showMessageDialog(null,"Make sure to enter the details for Phase 1 first");
        }
        else{
                     
            try{
            
                Patient p = new Patient(); //Creating an object of the Patient class and calling it p
                
                //Creating local variables to store the patient's name, condition and age so it could be used in the if else statements
                String name, condition;
                int age;

                name = nameTf.getText();
                condition = conditionTf.getText();
                age = Integer.parseInt(ageTf.getText());

                p.setName(name);
                p.setMedicalCondition(condition);
                p.setAge(age);

                if (condition.equalsIgnoreCase("Yes") || condition.equalsIgnoreCase("No")) {

                    //The following code will be excuted when the user enters a yes or no answer for their condition
                    if (age >= 90) { //Opening if else bracket

                        myQueue.enqueue(10, p);
                        JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                    } else if (age >= 80 && age <= 89) {

                        myQueue.enqueue(9, p);
                        JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                    } else if (age >= 70 && age <= 79) {

                        myQueue.enqueue(8, p);
                        JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                    } else if (age >= 65 && age <= 69) {

                        myQueue.enqueue(7, p);
                        JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                    } else if (age >= 18 && age <= 64) { //Opening else if bracket

                        /*Inisde of the if else statement below will check if any of the patients between the 18 and 64 age range has a medical condition*/
                        if (conditionTf.getText().equalsIgnoreCase("Yes")) {
                            /*If a patient is aged between 18 and 64 and has a medical condition, they will have a prority of 6*/
                            myQueue.enqueue(6, p);
                            JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");
                        }
                        /*if the patient between the age range of 18 and 64 doesn't have a medical condition, they will have a priority between 5 and 2*/
                        else if (conditionTf.getText().equalsIgnoreCase("No") && age >= 55 && age <= 64) {
                            myQueue.enqueue(5, p);
                            JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                        } else if (conditionTf.getText().equalsIgnoreCase("No") && age >= 45 && age <= 54) {

                            myQueue.enqueue(4, p);
                            JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                        } else if (conditionTf.getText().equalsIgnoreCase("No") && age >= 30 && age <= 44) {

                            myQueue.enqueue(3, p);
                            JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                        } else if (conditionTf.getText().equalsIgnoreCase("No") && age >= 18 && age <= 29) {

                            myQueue.enqueue(2, p);
                            JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                        }
                        
                    } //Closing else if bracket           
                    else {

                        myQueue.enqueue(1, p);
                        JOptionPane.showMessageDialog(null, nameTf.getText() + ", your details have been added to our list");

                    }

                    //Clears the text field once the information has been added in
                    nameTf.setText("");
                    ageTf.setText("");
                    conditionTf.setText("");
                    
                }//Closing if statement

            }
            catch (Exception e) {
                //Error message is sent back to the user when the age text field is left empty
                JOptionPane.showMessageDialog(null, "Something went wrong...");
            }
        } //Closing else statement
    }//GEN-LAST:event_priorityBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CovidVaccineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CovidVaccineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CovidVaccineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CovidVaccineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CovidVaccineGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTf;
    private javax.swing.JLabel conditionLbl;
    private javax.swing.JTextField conditionTf;
    private javax.swing.JButton exitBtn;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTf;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton priorityBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton sizeBtn;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
}
